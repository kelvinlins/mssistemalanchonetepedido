name: Deploy terraform

on:
  workflow_run:
    workflows: ["Deploy terraform Infra"]
    types:
      - completed

jobs:
  publish:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    name: Publish image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get Ecr host
        run: |
          ecrhost=$(aws ecr describe-repositories --repository-names mssistemalanchonetepedido-repository | grep -oP '"repositoryUri": "\K[^"]+(?=")')
          echo "ECRHOST=$ecrhost" >> $GITHUB_ENV

      - name: Configure Docker
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ env.ECRHOST }}

      - name: Get app version
        run: |
          version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "App version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t mssistemalanchonetepedido .

      - name: Create tag repository
        run:
          docker tag mssistemalanchonetepedido:latest "${{ env.ECRHOST }}:${{ env.VERSION }}"

      - name: Push Docker Image
        run: docker push ${{ env.ECRHOST }}:${{ env.VERSION }}
        continue-on-error: true

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get app version
        run: |
          version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "App version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Plan changes
        run: |
          cd terraform
          terraform fmt -recursive
          terraform init
          terraform plan -var='aws_region=${{ vars.AWS_REGION }}' -var='app_version=${{ env.VERSION }}'

  deploy:
    name: Deploy
    needs: plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get app version
        run: |
          version=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "App version: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Apply changes
        run: |
          cd terraform
          terraform fmt -recursive
          terraform init
          terraform apply -var='aws_region=${{ vars.AWS_REGION }}'  -var='app_version=${{ env.VERSION }}' --auto-approve
